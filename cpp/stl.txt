vector<int>v;
v.push_back(1);
v.emplace_back(2);
vecor<pair<int,int>>v;
v.push_back({1,2});
v.emplace_back(1,2);
vector<int> v(5,100);
vecor<int>v1(5,20);
vector<int>v2(v1);


vector<int>:: iterator it=v.begin();
it++;
cout<<*(it);

vector<int>:: iterator it=v.end();

v[0], v.at(0)
v.back();

for(vector<int>::iterator it=v.begin();it!=v.end();it++)
{
    cout<<*(it);
}

for(auto it=v.begin();it!=v.end();it++)
{
    cout<<*(it);
}

for(auto it : v)
{
    cout<<it;
}

v.erase(v.begin()+1);
v.erase(v.begin()+2,v.begin()+4);

vector<int>v(2,100);
v.insert(v.begin(),2,300);

v.size();
v.pop_back();
v.swap(v2);
v.clear();
v.empty();

list<int> ls;
dequeue<int>d;
d.pop_back();
d.pop_front();

Stack---------------------------LIFO
st.push();
st.top();
st.pop();
st.size();
st.empty();

stack<int>swap st1,st2;
st1.swap(st2);



queue----------------------------FIFO
q.push();
q.back();
q.front();
q.pop();


priority_queue<int>pq;
pq.push();
pq.top();
pq.pop();


priority_queue<int, vector<int>, greater<int>>pq;-------------minheap

push and pop in---- o(logn)  and     top in o(1)


set<int>st-----------------------sorted and unique
st.insert();
st.count();
auto it = st.find();
st.erase(it);
st.contains();

auto it= st.lower_bound();
auto it = st.upper_bound();


map<int,int>mp;
map<int,pair<int,int>>mp;

for(auto it : mp)
{
    cout<<it.first<<it.second;
}

auto it=mp.find();
cout<<*(it);


extra-----------------
sort(a,a+n);
sort(v.begin(),v.end());
sort(a,a+n,greater<int>);
sort(a,a+n,comp);

